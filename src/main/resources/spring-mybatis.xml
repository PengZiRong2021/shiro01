<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!--1.开启注解式开发-->
	<!-- 注解驱动 -->
	<context:annotation-config/>
	<!-- 用注解方式注入bean，并指定查找范围：com.zking.ssm及子子孙孙包-->
	<context:component-scan base-package="com.zking.shiro" use-default-filters="true">
		<context:exclude-filter type="regex" expression=".+\.controller\..*"/>
	</context:component-scan>
	<!--2.引入外部jdbc配置-->
	<!--<context:property-placeholder location="classpath:jdbc.properties"/>-->
    <!--3.配置dbcp2连接池-->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!--初始连接数-->
		<property name="initialSize" value="10"/>
		<!--最大活动连接数-->
		<property name="maxTotal" value="100"/>
		<!--最大空闲连接数-->
		<property name="maxIdle" value="50"/>
		<!--最小空闲连接数-->
		<property name="minIdle" value="10"/>
		<!--设置为-1时，如果没有可用连接，连接池会一直无限期等待，直到获取到连接为止。-->
		<!--如果设置为N（毫秒），则连接池会等待N毫秒，等待不到，则抛出异常-->
		<property name="maxWaitMillis" value="-1"/>
	</bean>
	<!--4. spring和MyBatis整合 -->
	<!--1) 创建sqlSessionFactory-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 自动扫描XxxMapping.xml文件，**任意路径 -->
		<property name="mapperLocations" value="classpath*:mapper/*.xml"/>
		<!-- 指定别名 -->
		<property name="typeAliasesPackage" value="com/zking/shiro/**/model"/>
		<!--配置pagehelper插件-->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<value>
							helperDialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!--2) 自动扫描com/zking/oa/**/mapper下的所有XxxMapper接口(其实就是DAO接口)，并实现这些接口，-->
	<!--   即可直接在程序中使用dao接口，不用再获取sqlsession对象-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--basePackage 属性是映射器接口文件的包路径。-->
		<!--你可以使用分号或逗号 作为分隔符设置多于一个的包路径-->
		<property name="basePackage" value="com/zking/shiro/**/mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!--5.注解式事务配置-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!--6.开启动态代理-->
	<aop:aspectj-autoproxy/>


	<!--spring集成shiro-->
	<bean id="shiroRealm" class="com.zking.shiro.realm.MyRealm">
		<property name="credentialsMatcher">
			<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!--指定hash算法为MD5-->
				<property name="hashAlgorithmName" value="md5"/>
				<!--指定散列次数为1024次-->
				<property name="hashIterations" value="1024"/>
				<!--true指定Hash散列值使用Hex加密存. false表明hash散列值用用Base64-encoded存储-->
				<property name="storedCredentialsHexEncoded" value="true"/>
			</bean>
		</property>
	</bean>
	<!--注册安全管理器-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroRealm" />
	</bean>
	<!--shiro核心过滤器配置-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 身份验证失败，跳转到登录页面 -->
		<property name="loginUrl" value="/login.jsp"/>
		<!-- 身份验证成功，跳转到指定页面 -->
		<property name="successUrl" value="/main.jsp"/>
		<!-- 权限验证失败，跳转到指定页面 -->
		<property name="unauthorizedUrl" value="/noauthorizeUrl.jsp"/>
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<property name="filterChainDefinitions">
			<value>
				<!--anon 表示匿名访问，不需要认证以及授权-->
				<!--authc表示需要认证 没有进行身份认证是不能进行访问的-->
				/login=anon
				/book/**=authc
				<!-- /css/**               = anon
                 /images/**            = anon
                 /js/**                = anon
                 /                     = anon
                 /user/logout          = logout
                 /user/**              = anon
                 /userInfo/**          = authc
                 /dict/**              = authc
                 /console/**           = roles[admin]
                 /**                   = anon-->
			</value>
		</property>
	</bean>

	<!--配置shiro生命周期-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>
